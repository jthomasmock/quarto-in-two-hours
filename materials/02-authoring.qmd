---
format: 
  revealjs:
    self-contained: true
    slide-number: true
    width: 1600
    height: 900
    logo: "https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png"
    footer: "[Quarto in 2 Hours](https://jthomasmock.github.io/quarto-in-two-hours/)"
    css: ["theme/theme.css"]
    theme: simple
editor: source
execute: 
  echo: true
---

# 02 - Authoring Quarto {background-color="#447099" background-image="images/typewriter.jpg" background-size="cover"}

## Quarto, anatomy

1.  Metadata: YAML

2.  Text: Markdown

3.  Code: `knitr` or `jupyter`

. . .

Add it all together, and you have beautiful, powerful, and useful outputs!

```{r include=FALSE}
library(tidyverse)
```


## Literate programming

> Literate programming is writing out the program logic in a human language with included (separated by a primitive markup) code snippets and macros. - [Wikipedia](https://en.wikipedia.org/wiki/Literate_programming)

    ---
    title: "ggplot2 demo"
    date: "5/22/2021"
    format: html
    ---

    ## Air Quality

    There is a relationship between temperature and the ozone level.

    ```{{r}}
    #| label: fig-airquality
    library(ggplot2)
    ggplot(airquality, aes(Temp, Ozone)) + 
      geom_point() + 
      geom_smooth(method = "loess"
    )
    ```

. . .

::: {style="background: #a13c6530; width: 400px; height: 145px; margin: 5px; position: absolute; top: 245px; left: 0px;"}
:::

. . .

::: {style="background: #fa551c30; width: 900px; height: 110px; margin: 5px; position: absolute; top: 405px; left: 0px;"}
:::

. . .

::: {style="background: #6a9c4230; width: 550px; height: 210px; margin: 5px; position: absolute; top: 520px; left: 0px;"}
:::

# 1 Metadata {background-color="#a13c65"}

## Metadata: YAML

"Yet Another Markup Language" or "YAML Ain't Markup Language"

``` yaml
---
key: value
---
```

## Output Options

``` yaml
---
format: something
---
```

. . .

``` yaml
---
format: html
---
```

``` yaml
---
format: pdf
---
```

``` yaml
---
format: revealjs
---
```

. . .

Then add option arguments!

``` yaml
---
format: 
  html:
    toc: true
    code-fold: true
---
```

. . .

Sub-options should be below the main format output and spacing matters!

``` yaml
---
format: 
  html:
    option1: text
    option2: logical
---
```

## YAML for `format: html`

</iframe>

## YAML is sensitive

``` yaml
---
format:html # invalid, no space between
---

---
format: # invalid, read as missing
html
---

---
format: 
  html: # valid but needs next object
---
```

. . .

Valid YAML can look a bit differently based on what all is needed

``` yaml
format: html # valid - there's a space

format:
  html # valid - there's 2x spaces on a new line and no trailing :

# valid - format = HTML with selections made
format: 
  html:
    toc: true
```

## Why YAML?

To avoid manually typing out all the options, every time!

. . .

```bash
quarto render document.qmd --to html
```

<br>

. . .

```bash
quarto render document.qmd --to html -M code fold:true
```

<br>

. . .

```bash
quarto render document.qmd --to html -M code-fold:true -P alpha:0.2 -P ratio:0.3
```

# Demo: Navigating within RStudio {background-color="black"}

## Quarto workflow

Executing the Quarto Render button in RStudio will call Quarto render in a background job - this will prevent Quarto rendering from cluttering up the R console, and gives you and easy way to stop.

![](images/background-job.png)

## Rendering

1. Render in RStudio, starts a background job and previews the output  

![](https://quarto.org/docs/tools/images/rstudio-render.png)

. . .

2. System shell via `quarto render`

```{bash}
#| eval: false
#| echo: true
quarto render document.qmd # defaults to html
quarto render document.qmd --to pdf
quarto render document.qmd --to docx
```

- Renders via terminal

. . .

3. R console via `quarto` R package

```{r}
#| eval: false
#| echo: true
library(quarto)
quarto_render("document.qmd") # defaults to html
quarto_render("document.qmd", output_format = "pdf")
```

# `r fontawesome::fa("laptop-code", "white")` Our Turn {background-color="#447099" transition="slide-in"}

- Open RStudio and `materials/workshop/visual-editor.qmd`
- Compare behavior of rendering from RStudio > Render, using the CLI with `quarto render`, and in R console via `quarto::quarto_render()`

## Quarto linting

> Lint, or a linter, is a static code analysis tool used to flag programming errors, bugs, stylistic errors and suspicious constructs. - [Lint](https://en.wikipedia.org/wiki/Lint_(software)#:~:text=Lint%2C%20or%20a%20linter%2C%20is,examined%20C%20language%20source%20code.)

. . .

::: columns
::: {.column width="50%"}
![](images/lint-rstudio.png)
:::

::: {.column width="50%"}
![](images/lint-vscode.png)
:::
:::

## Quarto YAML Intelligence

RStudio + VSCode provide rich tab-completion - start a word and tab to complete, or <kbd>`Ctrl + space`</kbd> to see all available options.

![](images/quarto-tab-complete.png)

# `r fontawesome::fa("laptop-code", "white")` Our turn {background-color="#447099" transition="slide-in"}

-   Open a new Quarto document in RStudio
-   Try <kbd>`Ctrl + space`</kbd> to see the available YAML options
-   Try out the tab-completion of any options you remember

## HTML options

[quarto.org/docs/reference/formats/html](https://quarto.org/docs/reference/formats/html.html)

You can use the [HTML reference](https://quarto.org/docs/reference/formats/html.html) if needed.

# Text & Markdown {background-color="#fa551c70"}

## Lists {.smaller}

+-------------------------------------+---------------------------------+
| Markdown Syntax                     | Output                          |
+=====================================+=================================+
|     * unordered list                | -   unordered list              |
|         + sub-item 1                |                                 |
|         + sub-item 2                |     -   sub-item 1              |
|             - sub-sub-item 1        |                                 |
|                                     |     -   sub-item 2              |
|                                     |                                 |
|                                     |         -   sub-sub-item 1      |
+-------------------------------------+---------------------------------+
|     *   item 2                      | -   item 2                      |
|                                     |                                 |
|         Continued (indent 4 spaces) |     Continued (indent 4 spaces) |
+-------------------------------------+---------------------------------+
|     1. ordered list                 | 1.  ordered list                |
|     2. item 2                       |                                 |
|         i) sub-item 1               | 2.  item 2                      |
|              A.  sub-sub-item 1     |                                 |
|                                     |     i.  sub-item 1              |
|                                     |                                 |
|                                     |         A.  sub-sub-item 1      |
+-------------------------------------+---------------------------------+
|     (@)  A list whose numbering     | 1.  A list whose numbering      |
|                                     |                                 |
|     continues after                 | continues after                 |
|                                     |                                 |
|     (@)  an interruption            | 2.  an interruption             |
+-------------------------------------+---------------------------------+
|     term                            | **term**                        |
|     : definition                    |                                 |
|                                     | :   definition                  |
+-------------------------------------+---------------------------------+

## Text Formatting

+-----------------------------------+-------------------------------+
| Markdown Syntax                   | Output                        |
+===================================+===============================+
|     *italics* and **bold**        | *italics* and **bold**        |
+-----------------------------------+-------------------------------+
|     superscript^2^ / subscript~2~ | superscript^2^ / subscript~2~ |
+-----------------------------------+-------------------------------+
|     ~~strikethrough~~             | ~~strikethrough~~             |
+-----------------------------------+-------------------------------+
|     `verbatim code`               | `verbatim code`               |
+-----------------------------------+-------------------------------+

## Headings

+---------------------+-----------------+
| Markdown Syntax     | Output          |
+=====================+=================+
|     # Header 1      | # Header 1      |
+---------------------+-----------------+
|     ## Header 2     | ## Header 2     |
+---------------------+-----------------+
|     ### Header 3    | ### Header 3    |
+---------------------+-----------------+
|     #### Header 4   | #### Header 4   |
+---------------------+-----------------+
|     ##### Header 5  | ##### Header 5  |
+---------------------+-----------------+
|     ###### Header 6 | ###### Header 6 |
+---------------------+-----------------+

## Links

- There are several types of "links" or hyperlinks.

::: columns
::: {.column width="50%"}
#### Markdown
```markdown
You can embed [named hyperlinks](https://quarto.org/),
direct urls like <https://quarto.org/>, and links to 
[other places](#quarto-anatomy) in 
the document. The syntax is similar for embedding an
inline image: ![Boston terrier](images/howard-gentleman.jpeg){fig-alt="A boston terrier's dressed up like a victorian gentleman"}.
```
:::
::: {.column width="50%" .fragment}
#### Output
You can embed [named hyperlinks](https://quarto.org/),
direct urls like <https://quarto.org/>, and links to  [other places](#quarto-anatomy) in 
the document. The syntax is similar for embedding an inline image:  
![Boston terrier](images/howard-gentleman.jpeg){style="width:250px;" fig-alt="A boston terrier's dressed up like a victorian gentleman"}
:::
:::

## Tables

::: columns
::: {.column width="50%"}
    | Right | Left | Default | Center |
    |------:|:-----|---------|:------:|
    |   12  |  12  |    12   |    12  |
    |  123  |  123 |   123   |   123  |
    |    1  |    1 |     1   |     1  |
:::

::: {.column width="50%" .fragment}
| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|    12 | 12   | 12      |   12   |
|   123 | 123  | 123     |  123   |
|     1 | 1    | 1       |   1    |
:::
:::

## Tables from code

`knitr` itself can turn R dataframes into tables with `knitr::kable()`

> A very simple table generator, and it is simple by design. It is not intended to replace any other R packages for making tables. . . .

```{r}
head(mtcars) |> 
  knitr::kable()
```


## Quotes

> Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. - Donald Knuth, Literate Programming ^["Literate Programming", The Computer Journal 27 (1984), p. 97. (Reprinted in Literate Programming, 1992, p. 99.) Literate Programming (1984)]

. . .

```markdown
> Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. - Donald Knuth, Literate Programming
```

. . .

> I like dogs  
> And I like cats

. . .

```markdown
> I like dogs
> And I like cats
```

# Code

## Anatomy of a code chunk

:::: {.columns}

::: {.column width="50%"}

````md
```{{r}}
#| label: car-stuff
#| echo: false
mtcars %>% 
  distinct(cyl)
```
````

:::

::: {.column width="50%" .fragment}

- Has 3x backticks on each end ```` ``` ````  
- Indicate engine (`r`) between curly braces `{r}`  
- Place options underneath, behind the `#|` (hashpipe): `#| option1: value`  

:::

::::

## Divs and Spans

Pandoc and therefore Quarto can parse ["fenced `Div` blocks"](https://pandoc.org/MANUAL.html#divs-and-spans)

. . .

    ::: {.border}
    This content can be styled with a border
    :::

. . .

::: {style="border-left:10px solid red"}
This content can be styled with a border
:::

    This is text with [special]{style="color:red;"} formatting.

. . .

This is text with [special]{style="color:red;"} formatting.

. . .

You're not limited to HTML/CSS concepts - Pandoc and Quarto also have "attributes" that can be assigned in this way.

### Divs and Spans

-   You can think of a `:::` div as a HTML `<div>` but it can also apply in specific situations to content in PDF
-   Similarly, `[text]{.class}` spans can be thought of a `<span .class>Text</span>` but again are a bit more transferable if using Pandoc/Quarto native attributes.

. . .

The following, if specifying a Quarto class can often apply between formats.

``` code
::: {.unnumbered .unlisted}
Text
:::
```

. . .

While the following is hard-coded as HTML.

``` html
<div style="font-size: 200px;">Text</div>
```

## Callout Blocks

    :::{.callout-note}
    Note that there are five types of callouts, including: 
    `note`, `tip`, `warning`, `caution`, and `important`.
    :::

::: callout-note
## Note

Note that there are five types of callouts, including: `note`, `tip`, `warning`, `caution`, and `important`.
:::

::: callout-warning
## Warning

Callouts provide a simple way to attract attention, for example, to this warning.
:::

::: callout-important
## This is important

Danger, callouts will really improve your writing.
:::

::: callout-tip
## Tip with caption
:::

::: callout-caution
## Caution, under construction

Here is something under construction
:::

## Callout markdown syntax

    :::{.callout-note}
    Note that there are five types of callouts, including:
    `note`, `warning`, `important`, `tip`, and `caution`.
    :::


    :::{.callout-tip}
    ## Tip With Caption

    This is an example of a callout with a caption.
    :::

<br> <br>

    :::{.callout-caution collapse="true"}
    ## Expand To Learn About Collapse

    This is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse="true"` to collapse it by default or `collapse="false"` to make a collapsible callout that is expanded by default.
    :::

# `r fontawesome::fa("laptop-code", "white")` Our turn {background-color="#447099" transition="slide-in"}

-   Open `materials/workshop/02-authoring/callout-boxes.qmd`
-   Try changing the types of callouts/remove them from code boxes and then render
-   Open `materials/workshop/02-authoring/callout-pdf.qmd` and render it as well

## Figures

Basic markdown syntax:

    ![Boston Terrier](images/boston-terrier.png)

![Boston Terrier](images/boston-terrier.png)

## Figures w/ code

```{r}
#| echo: fenced
#| fig-width: 4
#| fig-align: right

knitr::include_graphics("images/howard-gentleman.jpeg")
```

## Fragments/spans

::: columns
::: {.column width="50%"}
    ![Boston terrier](images/boston-terrier.png){fig-align="left"}

![](images/boston-terrier.png)
:::

::: {.column width="50%"}
    ![](images/boston-terrier.png){fig-align="right" fig-alt="A photo a Boston Terrier."}

![](images/boston-terrier.png){fig-align="right" fig-alt="A photo a Boston Terrier."}
:::
:::

## Subfigures fenced div class

    ::: {#fig-bostons layout-ncol=2}

    ![Excited](images/boston-terrier.png){#fig-boston width="250px"}

    ![Sleeping](images/boston-sleep.png){#fig-sleep width="250px"}

    Two states of Howard

    :::

## Subfigures

::: {#fig-bostons layout-ncol="2"}
![Excited](images/boston-terrier.png){#fig-boston width="250px"}

![Sleeping](images/boston-sleep.png){#fig-sleep width="250px"}

Two states of Howard
:::

## Subfigures

<iframe src="https://jthomasmock.github.io/quarto-in-two-hours/materials/static/sub-figure.html" height="800px" width="1200px">

</iframe>


## Subfigures

    ::: {#fig-bostons layout-nrow=2}

    ![Excited](images/boston-terrier.png){#fig-boston width="250px"}

    ![Sleeping](images/boston-sleep.png){#fig-sleep width="250px"}

    ![Still Excited](images/boston-terrier.png){#fig-boston width="250px"}

    ![Still sleeping](images/boston-sleep.png){#fig-sleep width="250px"}

    :::

## Subfigures

::: {layout-nrow="2"}
![Excited](images/boston-terrier.png){width="250px"}

![Sleeping](images/boston-sleep.png){width="250px"}

![Still Excited](images/boston-terrier.png){width="250px"}

![Still sleeping](images/boston-sleep.png){width="250px"}
:::

Two states of Howard, twice

## Subfigures

    ::: {layout-ncol="2"}
    ![Excited](images/boston-terrier.png){width="250px"}

    ![Sleeping](images/boston-sleep.png){width="250px"}

    ![Still Excited](images/boston-terrier.png){width="250px"}

    ![Still sleeping](images/boston-sleep.png){width="250px"}

    Two states of Howard, twice
    :::

::: {layout-ncol="2"}
![Excited](images/boston-terrier.png){width="250px"}

![Sleeping](images/boston-sleep.png){width="250px"}

![Still Excited](images/boston-terrier.png){width="250px"}

![Still sleeping](images/boston-sleep.png){width="250px"}

Two states of Howard, twice
:::

## Diagrams w/ `mermaid`

```{mermaid, echo=TRUE}
flowchart LR
  A[Hard edge] --> B(Round edge)
  B --> C{Decision}
  C --> D[Result one]
  C --> E[Result two]
```
