---
format: 
  revealjs:
    scrollable: false
    slide-number: true
    width: 1600
    height: 900
    logo: "https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png"
    footer: "[Quarto in 2 Hours](https://jthomasmock.github.io/quarto-in-two-hours/)"
    css: ["theme/theme.css"]
    theme: simple
    echo: true
editor: source
---

# {background-color="black" background-image="images/calculations.jpeg"}

[03 - Code and Editors]{style="color: white; font-size: 250px;"}

# {background-color="#6a9c42"}

[Code]{style="color: white; font-size: 200px;"}

## Execute code

```{r}
#| include: false
library(tidyverse)
```

One of the biggest similarities AND differences between Quarto and RMarkdown is how it handles native code.

. . .

Quarto uses the `{knitr}` engine just like RMarkdown to execute R code natively, along with many other languages.

. . .

Quarto can _also_ use the Jupyter engine to natively execute Julia, Python, or other languages that Jupyter supports.

::: {.r-stack}

![](images/qmd-knitr.jpg)

![](images/qmd-jupyter.png)

:::


## Choose your engine

:::: {.columns}

::: {.column width="50%"}

You can specify Jupyter to use defaults

```yaml
---
engine: jupyter
---
```

<br>

Or a specific Python version

```yaml
---
engine: python3
---
```

<br>

Or even a specific Jupyter Kernel!

```yaml
---
jupyter: 
  kernelspec:
    name: "venvPython"
    language: "python"
    display_name: "Python 3.7 (venv Python)"
---
```

:::

::: {.column width="50%"}

If R code is found first will default to `knitr`

```yaml
---
format: html
---
```

<br>

Or can force using `knitr` if you're mixing R/Python content or if your first code chunk is not R.

```yaml
---
format: html
engine: knitr
---
```

:::

::::

## Start your engine!

![](images/howard-speed.gif)


## `knitr` code cells

There's a lot of `knitr` options!

[https://quarto.org/docs/reference/cells/cells-knitr.html](https://quarto.org/docs/reference/cells/cells-knitr.html)

## Anatomy of a code chunk

:::: {.columns}

::: {.column width="50%"}

````md
```{{r}}
#| label: car-cyl
#| echo: false
mtcars %>% 
  distinct(cyl)
```
````

:::

::: {.column width="50%"}

- Has 3x backticks on each end ```` ``` ````  
- Place engine (`r`) between curly braces `{r}`  
- Place options underneath, behind the `#|` (hashpipe): `#| option1: value`  

:::

::::


## Code

```{r}
# label: example-code-introduction
#| echo: fenced
#| output-location: column
#| label: fig-airquality
#| fig-cap: Temperature and ozone level.
#| warning: false

library(ggplot2)

ggplot(airquality, aes(Temp, Ozone)) + 
  geom_point() + 
  geom_smooth(method = "loess"
)
```

## Code, more than just R

::: columns

::: {.column width="50%"}

```{python}
#| label: fig-polar
#| echo: fenced
#| eval: false
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

:::

::: {.column width="50%"}

![](images/polar-axis.png){width="650px"}

:::

:::

## Create code chunks

- You can manually type out code chunks: ```` ```{r} ````
- the keyboard shortcut <kbd>`Ctrl + Alt + I`</kbd> (OS X: <kbd>`Cmd + Option + I`</kbd>)
- the Add Chunk command in the editor toolbar

. . .

Or use the Command Palette: <kbd>`Cmd + Shift + P`</kbd>/<kbd>`Ctrl + Shift + P`</kbd>

# `r fontawesome::fa("laptop-code", "white")` Our turn {background-color="#447099" transition="slide-in"}

- Open `materials/workshop/03-computation/penguin-analysis.qmd`
- Insert three total code chunks with the shortcut <kbd>`Ctrl + Alt + I`</kbd>
  - Chunk 1: load `tidyverse` and `palmerpenguins` R packages and print the `penguins` dataset with `glimpse()`
  - Chunk 3: Create a plot of body mass (x) by bill length (y)
  - Render it!

## Inline code

```{verbatim, lang = "markdown"}
The mtcars dataset has `r nrow(mtcars)` rows
```

. . .

The mtcars dataset has `r nrow(mtcars)` rows

. . .

```{verbatim, lang = "markdown"}
The mtcars dataset has an average miles/per gallon of `r mean(mtcars$mpg)`
```

. . .

The mtcars dataset has an average miles/per gallon of `r mean(mtcars$mpg)`

. . .

```{r}
#| echo: false
fmt_mean <- scales::number_format(accuracy = 0.1)(mean(mtcars$mpg))
```


```{verbatim, lang = "markdown"}
fmt_mean <- scales::number_format(accuracy = 0.1, suffix = " mpg")(mean(mtcars$mpg))
The mtcars dataset has an fuel efficiency of `r fmt_mean`
```

. . .

The mtcars dataset has an average miles/per gallon of `r fmt_mean`


## Inline code with `Jupyter`

Pure Python/Julia Quarto documents via `engine: jupyter` can also do inline code, but this requires the use of [IPython.display.Markdown](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html) or the [`Markdown`](https://docs.julialang.org/en/v1/stdlib/Markdown/) package for Julia


::: {.panel-tabset}

## Python

````
```{{python}}
#| echo: false
radius = 10
from IPython.display import display, Markdown
display(Markdown("""
The radius of the circle is {radius}.
""".format(radius = radius)))
```
````

## Julia

````
```{{julia}}
#| echo: false
radius = 10
using Markdown
Markdown.parse("""
The radius of the circle is $radius.
""")
```
````

:::

# `r fontawesome::fa("laptop-code", "white")` Our turn {background-color="#447099" transition="slide-in"}

- Open `materials/workshop/03-authoring/inline-code.qmd`
- Look through the source code, and then render it
- Check out the appearance and building up of inline code -> inline output
- Try to add your own new calculations for inline reporting

## Code chunks options

All code chunk options at [yihui.org/knitr/options/](https://yihui.org/knitr/options/)

. . .

If you've used RMarkdown before, you're likely used to:


```{r, echo = "fenced", eval = TRUE}
mtcars %>% filter(mpg >= 25)
```

. . .

Quarto introduces the "hash pipe" in `#|`

```{r}
#| echo: fenced
#| eval: true
mtcars %>% filter(mpg >= 25)
```

## Quarto's hash pipe `#|`

![](images/hash-pipe.gif){width="800px"}

[Weezer - Hash Pipe](https://www.youtube.com/watch?v=_9BGLtqqkVI)

## Quarto chunk options

```{r}
#| echo: fenced
#| warning: false
#| fig-cap: "Air Quality"
#| fig-alt: "A ggplot2 with temperature by ozone levels along with a trend line indicating the increase in temperature with increasing ozone levels."

library(ggplot2)
ggplot(airquality, aes(Ozone, Temp)) + 
        geom_point() + 
        geom_smooth(method = "loess", se = FALSE)
```


## RMarkdown vs Quarto

You _can_ mix and match or use only R Markdown or Quarto style `knitr` options. However, note the difference between 'naming' of the chunk options, typically `one.two` vs `one-two`. The `one.two` exists for backwards compatibility and you should focus on `one-two` syntax.

```
fig.align vs fig-align
fig.dpi vs fig-dpi
```

. . .

This syntax is preferred because it aligns with Pandoc, which uses `word1-word2` style

. . .

```{r fig.align = "left"}
#| echo: fenced
#| fig-dpi: 350
mtcars |> 
  ggplot(aes(x = disp, y = mpg)) + geom_point()
```

## Quarto chunk options

::: {.callout-note}

Note that if you prefer it is still possible to include chunk options on the first line (e.g. ```` ```{r, echo = FALSE} ````). That said, we recommend using the comment-based syntax to make documents more portable and consistent across execution engines as that syntax only works for backwards compatability with R/RMarkdown.

:::

. . .

> Chunk options included this way use YAML syntax rather than R syntax for consistency with options provided in YAML front matter. You can still however use R code for option values by prefacing them with !expr. For example:

```
#| fig-cap: !expr paste("Air", "Quality")
```

. . .

## Setup Chunk

A special chunk! There can ONLY be one chunk named `setup`. It typically is used to set up the default values for the **entire document** with `knitr::opts_chunk$set()` and loading global R packages.

. . .

````
```{{r}}
#| label: setup
#| include: false
knitr::opts_chunk$set(
  comment = '#>', fig.width = 6, fig.height = 6
)
```
````

. . .

Quarto also introduces some of these as options for `execute:` in YAML, for similar concepts in other languages.

```yaml
---
format: html
execute:
  echo: false
  warning: false
---
```

## `knitr::opts_chunk` defaults

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true
str(knitr::opts_chunk$get()[1:27])
```

:::

::: {.column width="50%"}

```{r}
#| echo: true
str(knitr::opts_chunk$get()[28:53])
```

:::

::::

## Code chunks are controllable

Some examples

| Option      | Description |
| ----------- | ----------- |
| `fig-height: 4` | Plots generated from this chunk will have a height of 4 inches. |
| `fig-width: 6` | Plots generated from this chunk will have a width of 6 inches. |
| `dpi: 150`   | Plots generated will have a dots per inch (pixel density) of 150 |
| `echo: false` | Code will not be echoed (ie not shown) |
| `eval: false` | Nothing will be evaluated, but code still be printed |
| `cache: true` | Results will be cached, and chunk will not be run in subsequent renders, unless code is changed. | 
| `message: false` | No messages will be printed |
| `warning: false` | No warnings will be printed | 
| `include: false` | No ouputs/echo/messages/etc will be returned | 

## There's a lot of options!

[https://quarto.org/docs/reference/cells/cells-knitr.html](https://quarto.org/docs/reference/cells/cells-knitr.html)


## Chunks can be named

:::: {.columns}

::: {.column width="50%"}

```{r, echo = FALSE, out.width="80%"}
#| fig-alt: "A screenshot of a RMarkdown document inside RStudio. The screenshot highlights the automatically generated document  outline for each chunk name."
knitr::include_graphics("images/qmd-outline.png")
```

:::

::: {.column width="50%"}

* Useful for troubleshooting (ie _where_ is the document failing on render)  

```
label: unnamed-chunk-23
  |..............................|  83%
  ordinary text without R code
  |..............................|  85%
label: unnamed-chunk-24 (with options) 
List of 2
 $ fig.dim: num [1:2] 6 4
 $ dpi    : num 150
  |..............................|  86%
  ordinary text without R code
```
:::

::::

# `r fontawesome::fa("laptop-code", "white")` Our Turn {background-color="#447099" transition="slide-in"}

- Open RStudio and `materials/workshop/broken-notebook`
- Try to render it, see the errors
- Fix the errors by finding their named chunks and then render again!

## Chunk names, good and bad

:::: {.columns}

::: {.column width="50%"}

### Good

- `chunk`
- `myChunk`
- `my-chunk`
- `mychunk1`

:::

::: {.column width="50%"}
### Bad

(These _will_ fail)

- `my_chunk`
- `my chunk`

:::

::::

## Working with code

```{r}
mtcars |> 
  filter(mpg >= 25)
```

## Working with code

```{r}
mpg_cars <- mtcars |> 
  filter(mpg >= 25)
```


## Working with code

```{r}
mpg_cars <- mtcars |> 
  filter(mpg >= 25)

mpg_cars
```

## Working with code

```{r}
#| label: mpg-cars
#| echo: fenced
#| eval: false
mpg_cars <- mtcars |> 
  filter(mpg >= 25)

mpg_cars
```

## Working with code

````
```{{r}}
#| label: mpg-cars
#| echo: false
#| eval: true
```
````

```{r}
#| label: mpg-cars
#| echo: false
#| eval: true
```

# {background-image="https://d33wubrfki0l68.cloudfront.net/e798975ba0fc742c8e682a62edb0d41e8bf090ac/c620e/blog/rstudio-conf-2022-virtual/thumbnail_hu31b0245616fb8a6872183a9ec865f49c_657330_2220x0_resize_q75_box.jpg" background-size="cover"}

[Editors]{style="color: white; font-size: 150px;"}

## RStudio, quick intro

- Use R Projects, i.e. a `.RProj` 
- Overview of panes
- Overview of R Console vs Terminal
- Overview of Quarto, output inline vs output to pane

## Navigating in the terminal

Because Quarto is a command line interface (CLI), there are times you'll need to use it via the terminal. A great overview of using the command line and navigating files/directories is available via the [Data Carpentries](https://datacarpentry.org/shell-genomics/02-the-filesystem/index.html) or a great interactive tool for understanding commands: <https://tldr.ostera.io>

. . .

+------------------------------------+-------------------------------------------------------+
| Command                            | Action                                                |
+====================================+=======================================================+
| `pwd`                              | Print name of current working directory               |
+------------------------------------+-------------------------------------------------------+
| `cd`                               | Change current working directory                      |
+------------------------------------+-------------------------------------------------------+
| `ls`                               | List directory contents                               |
+------------------------------------+-------------------------------------------------------+
| `quarto --help`                    | Return `quarto` help docs                             |
+------------------------------------+-------------------------------------------------------+
| `mkdir howdy`                      | Make a new folder/directory called "howdy"            |
+------------------------------------+-------------------------------------------------------+
| `rm howdy/some-file.qmd` \| Remove | a file called `some-file.qmd` from the "howdy" folder |
+------------------------------------+-------------------------------------------------------+

## RStudio

RStudio has deep integration with R, `knitr` and Quarto

- Render button
- Visual Editor
- Preview of output

. . .

You should _always_ be using a recent release of the RStudio IDE - especially for the Quarto features. 

RStudio `2022.07.1` and beyond comes bundled with a production-stable release of Quarto, no additional install needed!

## YAML Auto-completion

Quarto + RStudio provides a rich YAML auto-completion based on text.

```yaml
---
format: 
  html:
    toc-depth: 3
    #toc-location: body
---

```

. . .

![](images/yaml-autocomplete.gif){height=50%}
## YAML Auto-completion

To find all the available options for a YAML section, you can use <kbd>`Ctrl + Space`</kbd>

![](images/yaml-ctrl.gif)

## `knitr` auto-completion

You can use tab-completion inside `knitr` chunk options for RMarkdown style or Quarto style as well.

![](images/knitr-autocomplete.gif)

## RStudio Visual Editor

![](https://quarto.org/docs/visual-editor/images/visual-editing.png)

# `r fontawesome::fa("laptop-code", "white")` Our turn {background-color="#447099" transition="slide-in"}

- Open `materials/workshop/03-authoring/visual-editor.qmd`
- Explore the UI elements and visual editor mode
- Turn Visual Editor mode on/off and explore the sections
- Render the document and compare the viewer to Visual Mode!

## VS Code

![](https://quarto.org/docs/tools/images/vscode-render.png)

## VS Code YAML

![](https://quarto.org/docs/tools/images/vscode-raw.png)

## VS Code, YAML Intelligence

![](https://quarto.org/docs/tools/images/vscode-yaml-completion.png)

## Jupyter/Jupyter Lab

![](https://quarto.org/docs/tools/images/jupyter-lab.png)

## Jupyter

`quarto preview notebook.ipynb --to html`

![](https://quarto.org/docs/tools/images/jupyterlab-preview.png)

## Jupyter YAML

Treat YAML as a "raw cell" in Jupyter - Jupyter doesn't care about YAML, but it's needed/used by Quarto

![](https://quarto.org/docs/tools/images/jupyter-lab-yaml.png)
